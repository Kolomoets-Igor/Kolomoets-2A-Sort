/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package Sort;

import java.util.Arrays;

public class Main {
    
    public static void main(String[] args) {
        int[] array = {5,2,7,3,9,1,8,4,6,0};
        
        // Сортировка пузырьком
        long startTime = System.currentTimeMillis();
        bubbleSort(array);
        long endTime = System.currentTimeMillis();
        System.out.println("Время выполнения сортировки пузырьком: " + (endTime - startTime) + " мс");
        
        // Быстрая сортировка
        startTime = System.currentTimeMillis();
        quickSort(array, 0, array.length-1);
        endTime = System.currentTimeMillis();
        System.out.println("Время выполнения быстрой сортировки: " + (endTime - startTime) + " мс");
        
        // Увеличение массива до 1000 элементов
        int[] bigArray = new int[1000];
        for (int i = 0; i < bigArray.length; i++) {
            bigArray[i] = (int) (Math.random() * 1000);
        }
        
        // Сортировка пузырьком
        startTime = System.currentTimeMillis();
        bubbleSort(bigArray);
        endTime = System.currentTimeMillis();
        System.out.println("Время выполнения сортировки пузырьком для большого массива: " + (endTime - startTime) + " мс");
        
        // Быстрая сортировка
        startTime = System.currentTimeMillis();
        quickSort(bigArray, 0, bigArray.length-1);
        endTime = System.currentTimeMillis();
        System.out.println("Время выполнения быстрой сортировки для большого массива: " + (endTime - startTime) + " мс");
    }
    
    public static void bubbleSort(int[] array) {
        for (int i = 0; i < array.length - 1; i++) {
            for (int j = 0; j < array.length - i - 1; j++) {
                if (array[j] > array[j+1]) {
                    int temp = array[j];
                    array[j] = array[j+1];
                    array[j+1] = temp;
                }
            }
        }
    }
    
    public static void quickSort(int[] array, int low, int high) {
        if (low < high) {
            int partitionIndex = partition(array, low, high);
            quickSort(array, low, partitionIndex - 1);
            quickSort(array, partitionIndex + 1, high);
        }
    }
    
    public static int partition(int[] array, int low, int high) {
        int pivot = array[high];
        int i = low - 1;
        
        for (int j = low; j < high; j++) {
            if (array[j] < pivot) {
                i++;
                int temp = array[i];
                array[i] = array[j];
                array[j] = temp;
            }
        }
        
        int temp = array[i+1];
        array[i+1] = array[high];
        array[high] = temp;
        
        return i + 1;
    }
}